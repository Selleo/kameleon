h1. Kameleon [chameleon]

"!https://secure.travis-ci.org/cs3b/kameleon.png!":http://travis-ci.org/cs3b/kameleon

Kameleon is a high abstraction dsl for better* writting acceptance, integration and functional tests using Capybara.
And "better" means: from the end user perspective.

h2. Setup:

Kameleon requires:
* rspec
* capybara
* devise ( kameleon uses paths suplied by devise. So if you're using some other authentication solution, you might want to overwrite it )
* selenium && racktest drivers
* thin (if you want run your specs faster - add gem 'thin' to Gemfile in your app)

Before you start using kameleon ensure that capybara is properly loaded (in your test helper file)

<pre>
require 'capybara/rails'
</pre>

After that

<pre>
gem install kameleon
</pre>

will get you going.


h2. Usage:

You start writing a scenario kameleon by defining your a session and usually an user.
bc. create_session(:fancy_name_that_identifies_the_session)
    @user = Factory.create(:user)

Yuo can create more sessions, giving each one an unique identifier. This is handy if you want to test scenarios that engage more than one user.
And here is an example of rspec scenario, writen using Kameleon DSL:

bc. background do
  create_session(:admin)
  @admin = Factory.create(:user)
end
scenario "opening list of news", :status => 'done' do
  act_as(:admin) do
    click "homepage", "community", "news"
    see "new medicine developed last weekend"

    within(:row => 'some cell text') do
      see 'see all values in row that contains that text'
    end
    within(:column => 'some header') do
      see 'see all values in that column'
    end.see :ordered => 'Z', 'X', 'Y'
    click :and_confirm => "Cancel", :and_dismiss => "Cancel"
  end
end

Another example:

bc.   feature "Products", :driver => :selenium do
  background do
    create_session(:admin)
    @admin = Factory.create(:user)
    visit spree.admin_path
  end
  context "listing products" do
    scenario "products sorting" do
      Factory(:product, :name => 'apache baseball cap', :available_on => '2011-01-06 18:21:13:', :count_on_hand => '0')
      Factory(:product, :name => 'zomg shirt', :available_on => '2125-01-06 18:21:13', :count_on_hand => '5')
      act_as(:admin) do
        click "Products"
        see :ordered => ["apache baseball cap", "zomg shirt"]
        click "admin_products_listing_name_title"
        see :ordered => ["zomg shirt", "apache baseball cap"]
      end
    end
  end

And more complex example, with two user sessions:

bc.    scenario "admin adds a product and user buys it", :status => "done", :driver => :selenium do

      create_session(:admin)
      @admin = Factory.create(:admin_user)


      act_as(:admin) do
        visit spree.admin_path
        click "Products", "admin_new_product"
        within('#new_product') do
          see "SKU"
        end
        fill_in "product_name" => "Baseball Cap"
        fill_in "product_sku" => "B100"
        fill_in "product_price"=> "100"
        fill_in "product_available_on"=> "2012/01/24"
        click "Create"
        see "successfully created!"
        fill_in "product_on_hand" => "100"
        click "Update"
        see "successfully updated!"
      end

      create_session(:user)

      act_as(:user) do
        visit spree.root_path
        click "Baseball Cap", "add-to-cart-button", "Checkout"
        within("span.out-of-stock") do
          see "Baseball Cap added to your cart"
        end
      end
    end



h2. Tips & Tricks:
* You have access to page variable. So if you think that something cannot be accomplished by the Kameleon DSL, you can just write using RSpec matchers
and page variable. Like this:  page.should have_css("li.banner_message", :count => 10)
* It is handy to define a common set of areas, that user often follows navigating on the site. Here is an example:
bc. Kameleon::Session.defined_areas.merge!({
                                           :menu => [:xpath, "//nav/ul"],
                                           :main => '.main_body',
                                           :right_column => '.col_aside',
                                           :ordered_list => '.ordered_list',
                                           :favourites => '.favourites_list',
                                           :gallery_tiny => '.gallery_tiny',
                                           :gallery_list => '.gallery_list',
                                           :content => '.col_content',
                                           :col_aside => '.col_aside'
                                       })


h3. Session pooling

Kameleon has useful technique of session pooling implemented, that can speed up test suite greatly.
In order to enable it, you need to pass this to the RSpec.configure block, in spec_helper.rb:

bc. config.after(:each) do
  ::SessionPool.release_all
end

h2. Credits:
* <a href="http://selleo.com/people/michal-czyz">Michał Czyż</a>
* <a href="http://selleo.com/people/radoslaw-jedryszczak">Radosław Jędryszczak</a>
* <a href="http://selleo.com/people">Szymon Kieloch</a>
